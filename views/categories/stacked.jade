extends ../layout

block content
  h1= title

  form
    select
      option Toutes les catégories
      for item in selectValues
        option(value='#{item._id.id}') #{item._id.name}

  form
    label Relatifs
      input(type='radio', name='mode', value='normalized')
    label Valeurs
      input(type='radio', name='mode', value='raw', checked)
    input(type='button', name='down', value='Cycle bas')
    input(type='button', name='up', value='Cycle haut')

  script(type='text/javascript').
    d3.select("select").on('change', function() {
      var selectedValue = this.options[this.selectedIndex].value;
      var currentLoc = window.location;
      window.location.assign(currentLoc + '/' + selectedValue)
    })

  script(type='text/javascript').
    var hierarchy = !{JSON.stringify(data)};

    var matrix = [];
    var dateList = [];
    var categoryList = [];
    var topCategoryList = [];

    var categories = [];
    var days = [];
    var daysTotal = [];

    var colors = [];
    colors.push("#5DA5DA"); // blue
    colors.push("#FAA43A"); // orange
    colors.push("#F17CB0"); // pink
    colors.push("#60BD68"); // green
    colors.push("#F15854"); // red

    function color(i) {
      return colors[i];
    }

    function getCategory(name) {
      var index = -1;
      for (var i = 0; i < categories.length; i++) {
        if (categories[i].name === name) {
          index = i;
          break;
        }
      }
      
      if (index === -1) {
        var category = {
          name: name,
          value: 0
        }
        categories.push(category);
        return category;
      }
      else return categories[index];
    }

    function getIndexOrInsert(list, element) {
      var index = list.indexOf(element);
      if (index === -1) {
        index = list.push(element) - 1;
      }
      return index;
    }

    function pushValueToMatrix(matrix, x, y, value) {
      if (matrix[x] === undefined) {
        matrix[x] = [];
      }
      matrix[x][y] = value;
    }

    // Sums all the category values
    hierarchy.forEach(function(element) {
      var categoryName = element._id.category;
      var category = getCategory(categoryName);
      category.value = category.value + element.number;
    });
    // Sorts the list
    categories = categories.sort(function(a, b) {
      return b.value - a.value;
    });

    // Selects only top five categories
    var maxValue = categories.length;
    if (maxValue > 5) maxValue = 5;
    for (var i = 0; i < maxValue; i++) {
      topCategoryList[i] = categories[i].name;
    }

    hierarchy.forEach(function(element) {
      var day = element._id.day;
      var category = element._id.category;
      
      if (topCategoryList.indexOf(category) !== -1) {
        var dateIndex = getIndexOrInsert(dateList, day);
        var categoryIndex = getIndexOrInsert(categoryList, category);
        pushValueToMatrix(matrix, categoryIndex, dateIndex, element.number);

        var previousTotal = daysTotal[dateIndex];
        if (previousTotal === undefined) previousTotal = 0;
        previousTotal = previousTotal + element.number;
        daysTotal[dateIndex] = previousTotal;
      }  
    });

    for (var i = 0; i < dateList.length; i++) {
      days.push(new Date(dateList[i]));
    }

    for (var i = 0; i < categoryList.length; i++) {
      for (var j = 0; j < dateList.length; j++) {
        if (matrix[i][j] === undefined) {
          matrix[i][j] = 0;
        }
      }
    }

    var offset = 0;
    var displayType;

    var n = categoryList.length, // number of layers
        m = dateList.length, // number of samples per layer
        stack = d3.layout.stack(),
        layers = stack(d3.range(n).map(function(i) {
          var index = (i + offset) % matrix.length; 
          return matrix[index].map(function(d, i) {
            //return { x: i, y: d };
            return { x: days[i], y: d, category: categoryList[index] }
          });
        })),
        yGroupMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y; }); }),
        yStackMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); });

    var margin = {top: 40, right: 10, bottom: 20, left: 10},
        width = 1280 - margin.left - margin.right,
        height = 660 - margin.top - margin.bottom;

    var xDomain = [];

    var firstDay = days[0];
    var lastDay = days[days.length - 1];

    var dayBefore = new Date(firstDay.getFullYear(), 
                            firstDay.getMonth(), 
                            firstDay.getDate() - 1);

    var dayAfter = new Date(lastDay.getFullYear(), 
                           lastDay.getMonth(), 
                           lastDay.getDate() + 1);

    xDomain.push(dayBefore);
    xDomain.push(dayAfter);

    var x = d3.time.scale()
            .domain(xDomain)
            //.rangeRoundBands([0, width], .08);
            .range([0, width]);

    var y = d3.scale.linear()
        .domain([0, yStackMax])
        .range([height, 0]);

    /*var color = d3.scale.linear()
        .domain([0, n - 1])
        .range(["#aad", "#556"]);*/

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var layer = svg.selectAll(".layer")
        .data(layers)
      .enter().append("g")
        .attr("class", "layer")
        .style("fill", function(d, i) { return color(i); });

    var rect = layer.selectAll("rect")
        .data(function(d) { return d; })
      .enter().append("rect")
        .attr("x", function(d) { return x(d.x) - ((width / m) - 3) / 2; })
        .attr("y", height)
        //.attr("width", x.rangeBand())
        .attr("width", (width / m) - 3)
        .attr("height", 0);
        
    rect.append("svg:title")
        .text(function(d) {
          return d.category + ' - ' + d.y + ' évènements';
        });


    // TODO Use Tipsy ?
    // http://stackoverflow.com/questions/10805184/d3-show-data-on-mouseover-of-circle
    // http://bl.ocks.org/ilyabo/1373263
    // http://onehackoranother.com/projects/jquery/tipsy/


    rect.transition()
        .delay(function(d, i) { return i * 10; })
        .attr("y", function(d) { return y(d.y0 + d.y); })
        .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); });

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    d3.selectAll("input[name=\"mode\"]").on("change", change);
    d3.selectAll("input[name=\"down\"]").on("click", rotateMatrixDown);
    d3.selectAll("input[name=\"up\"]").on("click", rotateMatrixUp);

    var timeout = setTimeout(function() {
      d3.select("input[value=\"normalized\"]").property("checked", true).each(change);
    }, 2000);

    function getOffsetIndex(i) {
      var index = ((i + offset % n) + n) % n;
      return index
    }

    function updateAfterRotation() {
      layers = stack(d3.range(n).map(function(i) {
          var index = getOffsetIndex(i); 
          return matrix[index].map(function(d, i) {
            return { x: days[i], y: d, category: categoryList[index] }
          });
        }))

      var layer = svg.selectAll(".layer")
        .data(layers)

      layer.transition()
        .duration(750)
        .style("fill", function(d, i) { return color(getOffsetIndex(i)); });

      var rect = layer.selectAll("rect")
        .data(function(d) { return d; })

      rect.transition()
          .duration(500)
          .delay(function(d, i) { return 250; })
          .attr("y", function(d, i) {
            if (displayType === "raw") {
              return calcYRaw(d, i);
            } else {
              return calcYNormalized(d, i);
            } 
          })
          .attr("height", function(d, i) {
            if (displayType === "raw") {
              return calcHeightRaw(d, i);
            } else {
              return calcHeightNormalized(d, i);
            } 
          });

      var titles = rect.selectAll("title");
      titles.remove();

      rect.append("svg:title")
        .text(function(d) {
          return d.category + ' - ' + d.y + ' évènements';
        });

      /*titles.text(function(d) {
        return d.category + ' - ' + d.y + ' évènements';
      });*/
    }

    function rotateMatrixUp() {
      offset = offset - 1;
      updateAfterRotation();
    }

    function rotateMatrixDown() {
      offset = offset + 1;
      updateAfterRotation();
    }

    function change() {
      clearTimeout(timeout);
      displayType = this.value;
      if (displayType === "raw") transitionRaw();
      else transitionNormalized();
    }

    function transitionStack(setStack, calcY, calcHeight) {
      var rect = layer.selectAll("rect");

      layers = stack(d3.range(n).map(function(i) { 
          return setStack(i);
        }))

      yStackMax = d3.max(layers, function(layer) { 
        return d3.max(layer, function(d, i) { 
          return d.y0 + d.y; 
        }); 
      });

      y.domain([0, yStackMax]);

      rect.transition()
          .duration(500)
          .delay(function(d, i) { return i * 10; })
          .attr("y", function(d, i) { 
             return calcY(d, i);
          })
          .attr("height", function(d, i) {
            return calcHeight(d, i);
          });
    }

    function setStackRaw(i) {
      var index = getOffsetIndex(i); 
      return matrix[index].map(function(d, i) {
        return { x: days[i], y: d, category: categoryList[index] }
      });
    }

    function calcYRaw(d, i) {
      return y(d.y + d.y0);
    }

    function calcHeightRaw(d, i) {
      return height - y(d.y);
    }

    function transitionRaw() {
      transitionStack(setStackRaw, calcYRaw, calcHeightRaw);
    }

    function setStackNormalized(i) {
      var index = getOffsetIndex(i); 
        return matrix[index].map(function(d, i) {
          var tot = daysTotal[i];
          return { x: days[i], y: d / tot, category: categoryList[index] }
        });
    }

    function calcYNormalized(d, i) {
      var tot = daysTotal[i]; 
      return y(d.y / tot + d.y0 / tot);
    }

    function calcHeightNormalized(d, i) {
      var tot = daysTotal[i]; 
      return height - y(d.y / tot);
    }

    function transitionNormalized() {
      transitionStack(setStackNormalized, calcYNormalized, calcHeightNormalized);
    }